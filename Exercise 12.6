# Exercise 12.6
def make_dict2(filename):
    # make a dictionary from the text file
    # using word length as the key
    d = {}
    fin = open(filename)
    for line in fin:
        d[line.strip()] = line.strip()
    return d


def reduce_word(s):
    # reduce a letter from a string
    # and return a list of all reduced words
    t = []
    for i in range(len(s)):
        t.append(s[:i]+s[i+1:])
    return t


known = {'':[]}  # memo
def is_reducible(s, wd):
    # check if a word s is in the word dictionary wd
    if s in known:
        return True

    t = reduce_word(s)
    for rs in t:
        if rs in wd and is_reducible(rs, wd):
        # if any of the reduced word from s is in the
        # dictionary and also reducible, then return
        # True immediately
            known[s] = []
            return True
    return False


def find_reducible(wd):
    rd = []
    for s in wd:
        if is_reducible(s, wd):
            rd.append((len(s), s))
    rd.sort(reverse=True)

    for length, word in rd:
        print(word)

word_dict = make_dict2("words.txt")
find_reducible(word_dict)

#########################
  def make_list(filename):                                                                                                                                                                                
      # make a list from the text file
      t = []
      fin = open(filename)
      for line in fin:
          word = line.strip()
          t.append(word)
      return t
 
def get_children(w):
    children = []
    for i in range(len(w)):
        children.append(w[:i] + w[i+1:])
    return children

# recursively reduce a word
# remember the reduciable word and its immediate children, so we don't need to
# regenerate them.
def reduce(w, d):
    if len(w) == 0:
        return;

    for child in get_children(w):
        if d.get(child) is not None:
            d.setdefault(w, []).append(child)

def find_reducible_words(t):
    d = {}
    d.setdefault("", [])
    d.setdefault("I", [])
    d.setdefault("a", [])

    for s in t:
        reduce(s, d)

    return d.keys()

def find_longest(word):
    sorted_list = sorted(word, key=len, reverse=True)
    return sorted_list[0]

word_list = make_list("words.txt")
reduced_list = find_reducible_words(word_list)
longest = find_longest(reduced_list)
print(*reduced_list, sep="\n")
print('Longest word is {}, len of the word is {}'.format(longest, len(longest)))
